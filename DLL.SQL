-- =====================================================================================
--  ESQUEMA BASE (puede omitirse si ya existe un schema)
-- =====================================================================================
-- CREATE USER tienda IDENTIFIED BY tienda DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp QUOTA UNLIMITED ON users;
-- GRANT CONNECT, RESOURCE TO tienda;
-- ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

-- =====================================================================================
--  SEGURIDAD / AUDITORÍA
-- =====================================================================================

CREATE TABLE roles (
  id_rol          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_rol      VARCHAR2(50)  NOT NULL UNIQUE,
  descripcion     VARCHAR2(200),
  estado          CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion  TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE permisos (
  id_permiso      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_permiso  VARCHAR2(80)  NOT NULL,
  categoria       VARCHAR2(40),
  estado          CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion  TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT uq_permiso UNIQUE (nombre_permiso, categoria)
);

CREATE TABLE roles_permisos (
  id_rol      NUMBER NOT NULL,
  id_permiso  NUMBER NOT NULL,
  PRIMARY KEY (id_rol, id_permiso),
  CONSTRAINT fk_rp_rol     FOREIGN KEY (id_rol)     REFERENCES roles(id_rol),
  CONSTRAINT fk_rp_permiso FOREIGN KEY (id_permiso) REFERENCES permisos(id_permiso)
);

CREATE TABLE empresas (
  id_empresa      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre          VARCHAR2(120) NOT NULL UNIQUE,
  estado          CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion  TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE usuarios (
  id_usuario        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre            VARCHAR2(120) NOT NULL,
  usuario           VARCHAR2(60)  NOT NULL UNIQUE,
  email             VARCHAR2(120) NOT NULL UNIQUE,
  contrasena_hash   VARCHAR2(200) NOT NULL,
  telefono          VARCHAR2(20),
  estado            CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion    TIMESTAMP DEFAULT SYSTIMESTAMP,
  fecha_ultimo_acceso TIMESTAMP
);

CREATE TABLE usuarios_empresas (
  id_usuario   NUMBER NOT NULL,
  id_empresa   NUMBER NOT NULL,
  id_rol       NUMBER NOT NULL,
  PRIMARY KEY (id_usuario, id_empresa),
  CONSTRAINT fk_ue_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
  CONSTRAINT fk_ue_empresa FOREIGN KEY (id_empresa) REFERENCES empresas(id_empresa),
  CONSTRAINT fk_ue_rol     FOREIGN KEY (id_rol)     REFERENCES roles(id_rol)
);

CREATE TABLE log_sesiones (
  id_sesion     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario    NUMBER NOT NULL,
  ip_origen     VARCHAR2(64),
  dispositivo   VARCHAR2(100),
  descripcion   VARCHAR2(200),
  fecha_inicio  TIMESTAMP DEFAULT SYSTIMESTAMP,
  fecha_cierre  TIMESTAMP,
  estado        VARCHAR2(20), -- ex: INICIADA, CERRADA, EXPIRADA
  CONSTRAINT fk_logs_user FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
);

CREATE TABLE log_actividades (
  id_log        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario    NUMBER NOT NULL,
  modulo        VARCHAR2(60),
  accion        VARCHAR2(60),
  objeto        VARCHAR2(120),
  descripcion   VARCHAR2(400),
  ip_origen     VARCHAR2(64),
  fecha_accion  TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_logact_user FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
);

-- Opcional: secciones / asignaciones específicas por UI
CREATE TABLE secciones_usuario (
  id_seccion       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario       NUMBER NOT NULL,
  nombre_seccion   VARCHAR2(80) NOT NULL,
  descripcion      VARCHAR2(200),
  fecha_asignacion TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_secc_user FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
);

-- =====================================================================================
--  PARÁMETROS, RESPALDOS Y REPORTES
-- =====================================================================================

CREATE TABLE parametros_sistema (
  id_parametro       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_parametro   VARCHAR2(80) NOT NULL UNIQUE,
  valor_parametro    VARCHAR2(400),
  tipo_parametro     VARCHAR2(30), -- STRING, NUMBER, JSON, BOOL
  descripcion        VARCHAR2(300),
  usuario_modificacion VARCHAR2(120),
  fecha_modificacion TIMESTAMP DEFAULT SYSTIMESTAMP,
  estado             CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I'))
);

CREATE TABLE backup_logs (
  id_backup    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  tipo_backup  VARCHAR2(30), -- FULL, INCR, EXPORT
  fecha_backup TIMESTAMP DEFAULT SYSTIMESTAMP,
  ruta_archivo VARCHAR2(300),
  tamano_mb    NUMBER(12,2),
  usuario_ejecuta VARCHAR2(120),
  resultado    VARCHAR2(30), -- OK/ERROR
  detalle_error VARCHAR2(400),
  fecha_creacion TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE tipo_reporte (
  id_tipo_reporte  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_reporte   VARCHAR2(120) NOT NULL,
  descripcion      VARCHAR2(300),
  sql_base         CLOB,                 -- consulta base parametrizable
  categoria        VARCHAR2(60),
  estado           CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion   TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE reportes_generados (
  id_reporte_generado NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_tipo_reporte     NUMBER NOT NULL,
  id_usuario          NUMBER NOT NULL,
  parametros_json     CLOB,
  ruta_archivo        VARCHAR2(300),
  formato_salida      VARCHAR2(30), -- PDF, XLSX, CSV
  estado              VARCHAR2(30), -- GENERADO, ERROR
  fecha_creacion      TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_rg_tipo  FOREIGN KEY (id_tipo_reporte) REFERENCES tipo_reporte(id_tipo_reporte),
  CONSTRAINT fk_rg_user  FOREIGN KEY (id_usuario)      REFERENCES usuarios(id_usuario)
);

-- =====================================================================================
--  MAESTROS: CATEGORÍAS / PROVEEDORES / ALMACENES / CLIENTES / DESCUENTOS
-- =====================================================================================

CREATE TABLE categoria_producto (
  id_categoria     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_categoria VARCHAR2(100) NOT NULL UNIQUE,
  codigo_categoria VARCHAR2(6)   NOT NULL UNIQUE,   -- p/ SKU
  descripcion      VARCHAR2(200),
  estado           CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion   TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE proveedores (
  id_proveedor    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_proveedor VARCHAR2(120) NOT NULL,
  contacto        VARCHAR2(120),
  telefono        VARCHAR2(25),
  email           VARCHAR2(120),
  direccion       VARCHAR2(200),
  cedula_juridica VARCHAR2(40),
  estado          CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_registro  TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE almacenes (
  id_almacen     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_almacen VARCHAR2(100) NOT NULL UNIQUE,
  responsable    VARCHAR2(120),
  telefono       VARCHAR2(25),
  direccion      VARCHAR2(200),
  estado         CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE clientes (
  id_cliente      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_cliente  VARCHAR2(120) NOT NULL,
  cedula          VARCHAR2(40),
  telefono        VARCHAR2(25),
  email           VARCHAR2(120),
  direccion       VARCHAR2(200),
  fecha_registro  TIMESTAMP DEFAULT SYSTIMESTAMP,
  estado          CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I'))
);

CREATE TABLE descuentos (
  id_descuento     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_descuento VARCHAR2(120) NOT NULL,
  tipo_descuento   VARCHAR2(20)  NOT NULL, -- PORCENTAJE, MONTO
  valor_descuento  NUMBER(12,2)  NOT NULL CHECK (valor_descuento >= 0),
  fecha_inicio     DATE,
  fecha_fin        DATE,
  id_producto      NUMBER,                 -- opcional por producto
  estado           CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion   TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- =====================================================================================
--  PRODUCTOS (con SKU automático ZHN-<CODCAT>-<#####>)
-- =====================================================================================

CREATE TABLE productos (
  id_producto     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  codigo_producto VARCHAR2(24) UNIQUE,           -- SKU
  nombre_producto VARCHAR2(150) NOT NULL,
  descripcion     VARCHAR2(400),
  precio_venta    NUMBER(12,2) DEFAULT 0 NOT NULL CHECK (precio_venta >= 0),
  precio_compra   NUMBER(12,2) DEFAULT 0 NOT NULL CHECK (precio_compra >= 0),
  stock           NUMBER(12,2) DEFAULT 0 NOT NULL CHECK (stock >= 0),
  unidad_medida   VARCHAR2(20),
  id_categoria    NUMBER NOT NULL,
  id_proveedor    NUMBER,
  id_almacen      NUMBER,
  estado          CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion  TIMESTAMP DEFAULT SYSTIMESTAMP,
  fecha_actualizacion TIMESTAMP,
  CONSTRAINT fk_prod_cat  FOREIGN KEY (id_categoria) REFERENCES categoria_producto(id_categoria),
  CONSTRAINT fk_prod_prov FOREIGN KEY (id_proveedor) REFERENCES proveedores(id_proveedor),
  CONSTRAINT fk_prod_alma FOREIGN KEY (id_almacen)   REFERENCES almacenes(id_almacen)
);

-- Secuencia para el consecutivo del SKU
CREATE SEQUENCE seq_sku START WITH 1 INCREMENT BY 1 NOCACHE;

-- Función para generar SKU: ZHN-<CODCAT>-<#####> CORRER COMO SYSDBA O USUARIO CON PRIVILEGIOS
CREATE OR REPLACE FUNCTION fn_gen_sku(p_id_categoria NUMBER) 
RETURN VARCHAR2
IS
  v_cod categoria_producto.codigo_categoria%TYPE;
  v_num NUMBER;
BEGIN
  SELECT codigo_categoria INTO v_cod
    FROM categoria_producto
   WHERE id_categoria = p_id_categoria;

  v_num := seq_sku.NEXTVAL;
  RETURN 'ZHN-' || v_cod || '-' || LPAD(v_num, 5, '0');
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER trg_prod_sku_bi
BEFORE INSERT ON productos
FOR EACH ROW
BEGIN
  IF :NEW.codigo_producto IS NULL THEN
    :NEW.codigo_producto := fn_gen_sku(:NEW.id_categoria);
  END IF;
END;
/
SHOW ERRORS;

-- Trigger: autogenerar SKU si viene NULL
CREATE OR REPLACE TRIGGER trg_prod_sku_bi
BEFORE INSERT ON productos
FOR EACH ROW
BEGIN
  IF :NEW.codigo_producto IS NULL THEN
    :NEW.codigo_producto := fn_gen_sku(:NEW.id_categoria);
  END IF;
END;
/

-- FK tardía de descuentos a producto (después de crear productos)
ALTER TABLE descuentos
  ADD CONSTRAINT fk_desc_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto);

-- =====================================================================================
--  INVENTARIO Y COMPRAS
-- =====================================================================================

CREATE TABLE compras (
  id_compra      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_proveedor   NUMBER NOT NULL,
  id_usuario     NUMBER NOT NULL,
  fecha_compra   TIMESTAMP DEFAULT SYSTIMESTAMP,
  subtotal       NUMBER(12,2) DEFAULT 0 NOT NULL,
  descuento_total NUMBER(12,2) DEFAULT 0 NOT NULL,
  impuesto       NUMBER(12,2) DEFAULT 0 NOT NULL,
  total          NUMBER(12,2) DEFAULT 0 NOT NULL,
  estado         VARCHAR2(20) DEFAULT 'REGISTRADA', -- REGISTRADA, ANULADA
  observacion    VARCHAR2(300),
  fecha_creacion TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_comp_prov FOREIGN KEY (id_proveedor) REFERENCES proveedores(id_proveedor),
  CONSTRAINT fk_comp_user FOREIGN KEY (id_usuario)   REFERENCES usuarios(id_usuario)
);

CREATE TABLE detalle_compras (
  id_detalle_compra NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_compra         NUMBER NOT NULL,
  id_producto       NUMBER NOT NULL,
  cantidad          NUMBER(12,2) NOT NULL CHECK (cantidad > 0),
  precio_unitario   NUMBER(12,2) NOT NULL CHECK (precio_unitario >= 0),
  descuento_unitario NUMBER(12,2) DEFAULT 0 NOT NULL CHECK (descuento_unitario >= 0),
  subtotal          NUMBER(12,2) GENERATED ALWAYS AS (cantidad * precio_unitario - descuento_unitario) VIRTUAL,
  impuesto          NUMBER(12,2) DEFAULT 0 NOT NULL,
  total_linea       NUMBER(12,2) GENERATED ALWAYS AS (subtotal + impuesto) VIRTUAL,
  fecha_registro    TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_dc_compra FOREIGN KEY (id_compra)   REFERENCES compras(id_compra),
  CONSTRAINT fk_dc_prod   FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
);

CREATE TABLE movimientos_inventario (
  id_movimiento    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_producto      NUMBER NOT NULL,
  tipo_movimiento  CHAR(1) NOT NULL CHECK (tipo_movimiento IN ('E','S','A')), -- Entrada/Salida/Ajuste
  cantidad         NUMBER(12,2) NOT NULL CHECK (cantidad > 0),
  referencia       VARCHAR2(60),     -- p.ej., VENTA:123, COMPRA:456
  motivo           VARCHAR2(200),
  id_almacen       NUMBER,
  stock_anterior   NUMBER(12,2),
  stock_nuevo      NUMBER(12,2),
  fecha_movimiento TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_mov_prod FOREIGN KEY (id_producto) REFERENCES productos(id_producto),
  CONSTRAINT fk_mov_alma FOREIGN KEY (id_almacen)  REFERENCES almacenes(id_almacen)
);

-- =====================================================================================
--  VENTAS (POS)
-- =====================================================================================

CREATE TABLE metodos_pago (
  id_metodo_pago  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_metodo   VARCHAR2(60) NOT NULL UNIQUE,
  descripcion     VARCHAR2(200),
  estado          CHAR(1) DEFAULT 'A' CHECK (estado IN ('A','I')),
  fecha_creacion  TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE ventas (
  id_venta      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  codigo_venta  VARCHAR2(20) UNIQUE,
  id_usuario    NUMBER NOT NULL,
  id_cliente    NUMBER,
  id_metodo_pago NUMBER,
  fecha_venta   TIMESTAMP DEFAULT SYSTIMESTAMP,
  descuento_total NUMBER(12,2) DEFAULT 0 NOT NULL,
  impuesto      NUMBER(12,2) DEFAULT 0 NOT NULL,
  subtotal      NUMBER(12,2) DEFAULT 0 NOT NULL,
  total         NUMBER(12,2) DEFAULT 0 NOT NULL,
  observacion   VARCHAR2(300),
  estado        VARCHAR2(20) DEFAULT 'REGISTRADA',
  fecha_creacion TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_venta_user FOREIGN KEY (id_usuario)     REFERENCES usuarios(id_usuario),
  CONSTRAINT fk_venta_cli  FOREIGN KEY (id_cliente)     REFERENCES clientes(id_cliente),
  CONSTRAINT fk_venta_pago FOREIGN KEY (id_metodo_pago) REFERENCES metodos_pago(id_metodo_pago)
);

CREATE SEQUENCE seq_cod_venta START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE OR REPLACE TRIGGER trg_venta_codigo_bi
BEFORE INSERT ON ventas
FOR EACH ROW
BEGIN
  IF :NEW.codigo_venta IS NULL THEN
    :NEW.codigo_venta := 'V' || TO_CHAR(seq_cod_venta.NEXTVAL, 'FM000000');
  END IF;
END;
/

CREATE TABLE detalle_ventas (
  id_detalle_venta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_venta         NUMBER NOT NULL,
  id_producto      NUMBER NOT NULL,
  cantidad         NUMBER(12,2) NOT NULL CHECK (cantidad > 0),
  precio_unitario  NUMBER(12,2) NOT NULL CHECK (precio_unitario >= 0),
  descuento_unitario NUMBER(12,2) DEFAULT 0 NOT NULL CHECK (descuento_unitario >= 0),
  subtotal         NUMBER(12,2) GENERATED ALWAYS AS (cantidad * precio_unitario - descuento_unitario) VIRTUAL,
  impuesto         NUMBER(12,2) DEFAULT 0 NOT NULL,
  total_linea      NUMBER(12,2) GENERATED ALWAYS AS (subtotal + impuesto) VIRTUAL,
  fecha_registro   TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_dv_venta FOREIGN KEY (id_venta)    REFERENCES ventas(id_venta),
  CONSTRAINT fk_dv_prod  FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
);

-- =====================================================================================
--  ÍNDICES ÚTILES
-- =====================================================================================
CREATE INDEX ix_prod_nombre   ON productos (nombre_producto);
CREATE INDEX ix_prod_categoria ON productos (id_categoria);
CREATE INDEX ix_ventas_fecha  ON ventas (fecha_venta);
CREATE INDEX ix_mov_prod_fecha ON movimientos_inventario (id_producto, fecha_movimiento);
CREATE INDEX ix_clientes_nombre ON clientes (nombre_cliente);

-- =====================================================================================
--  DATOS BÁSICOS (semilla mínima)
-- =====================================================================================
INSERT INTO roles (nombre_rol, descripcion) VALUES ('admin','Administrador');
INSERT INTO roles (nombre_rol, descripcion) VALUES ('vendedor','Vendedor POS');

INSERT INTO metodos_pago (nombre_metodo) VALUES ('Efectivo');
INSERT INTO metodos_pago (nombre_metodo) VALUES ('SINPE Móvil');
INSERT INTO metodos_pago (nombre_metodo) VALUES ('Tarjeta');

COMMIT;


GRANT EXECUTE ON SYS.DBMS_RANDOM TO proyecto;
GRANT CREATE ANY SEQUENCE TO proyecto;
GRANT SELECT ANY TABLE TO proyecto;
GRANT SELECT ANY SEQUENCE TO proyecto;