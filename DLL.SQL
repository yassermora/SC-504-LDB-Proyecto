-- ======================================================================
-- BLOQUE A: CONFIGURACIÓN INICIAL COMO SYSDBA (dentro de la PDBTIENDA)
-- ======================================================================

-- 1. Conectar como SYS dentro de la PDB
-- sqlplus sys/<clave>@//localhost:1521/PDBTIENDA as sysdba
SHOW CON_NAME;

-- 2. Crear el usuario de aplicación
create user tienda identified by tienda
   default tablespace users
   quota unlimited on users
   account unlock;

-- 3. Conceder privilegios de desarrollo
grant create session to tienda;
grant create table to tienda;
grant create view to tienda;
grant create sequence to tienda;
grant create procedure to tienda;
grant create trigger to tienda;

-- 4. Conceder acceso a paquetes de seguridad y aleatoriedad
grant execute on sys.dbms_crypto to tienda;
grant execute on sys.dbms_random to tienda;

-- ======================================================================
-- BLOQUE B — ESQUEMA Y LÓGICA (USUARIO TIENDA)
-- ======================================================================
SHOW USER;   -- Debe decir: USER is "TIENDA"

-- ROLES / PERMISOS / ASIGNACIÓN
create table roles (
   id_rol         number generated by default as identity primary key,
   nombre_rol     varchar2(50) not null unique,
   descripcion    varchar2(200),
   estado         char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion timestamp default systimestamp
);

create table permisos (
   id_permiso     number generated by default as identity primary key,
   nombre_permiso varchar2(80) not null,
   categoria      varchar2(40),
   estado         char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion timestamp default systimestamp,
   constraint uq_permiso unique ( nombre_permiso,
                                  categoria )
);

create table roles_permisos (
   id_rol     number not null,
   id_permiso number not null,
   primary key ( id_rol,
                 id_permiso ),
   constraint fk_rp_rol foreign key ( id_rol )
      references roles ( id_rol ),
   constraint fk_rp_permiso foreign key ( id_permiso )
      references permisos ( id_permiso )
);

create table empresas (
   id_empresa     number generated by default as identity primary key,
   nombre         varchar2(120) not null unique,
   estado         char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion timestamp default systimestamp
);

create table usuarios (
   id_usuario          number generated by default as identity primary key,
   nombre              varchar2(120) not null,
   usuario             varchar2(60) not null unique,
   email               varchar2(120) not null unique,
   contrasena_hash     varchar2(200) not null,
   telefono            varchar2(20),
   estado              char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion      timestamp default systimestamp,
   fecha_ultimo_acceso timestamp
);

create table usuarios_empresas (
   id_usuario number not null,
   id_empresa number not null,
   id_rol     number not null,
   primary key ( id_usuario,
                 id_empresa ),
   constraint fk_ue_usuario foreign key ( id_usuario )
      references usuarios ( id_usuario ),
   constraint fk_ue_empresa foreign key ( id_empresa )
      references empresas ( id_empresa ),
   constraint fk_ue_rol foreign key ( id_rol )
      references roles ( id_rol )
);

create table log_sesiones (
   id_sesion    number generated by default as identity primary key,
   id_usuario   number not null,
   ip_origen    varchar2(64),
   dispositivo  varchar2(100),
   descripcion  varchar2(200),
   fecha_inicio timestamp default systimestamp,
   fecha_cierre timestamp,
   estado       varchar2(20),
   constraint fk_logs_user foreign key ( id_usuario )
      references usuarios ( id_usuario )
);

create table log_actividades (
   id_log       number generated by default as identity primary key,
   id_usuario   number not null,
   modulo       varchar2(60),
   accion       varchar2(60),
   objeto       varchar2(120),
   descripcion  varchar2(400),
   ip_origen    varchar2(64),
   fecha_accion timestamp default systimestamp,
   constraint fk_logact_user foreign key ( id_usuario )
      references usuarios ( id_usuario )
);

create table secciones_usuario (
   id_seccion       number generated by default as identity primary key,
   id_usuario       number not null,
   nombre_seccion   varchar2(80) not null,
   descripcion      varchar2(200),
   fecha_asignacion timestamp default systimestamp,
   constraint fk_secc_user foreign key ( id_usuario )
      references usuarios ( id_usuario )
);

create table parametros_sistema (
   id_parametro         number generated by default as identity primary key,
   nombre_parametro     varchar2(80) not null unique,
   valor_parametro      varchar2(400),
   tipo_parametro       varchar2(30),
   descripcion          varchar2(300),
   usuario_modificacion varchar2(120),
   fecha_modificacion   timestamp default systimestamp,
   estado               char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) )
);

create table backup_logs (
   id_backup       number generated by default as identity primary key,
   tipo_backup     varchar2(30),
   fecha_backup    timestamp default systimestamp,
   ruta_archivo    varchar2(300),
   tamano_mb       number(12,2),
   usuario_ejecuta varchar2(120),
   resultado       varchar2(30),
   detalle_error   varchar2(400),
   fecha_creacion  timestamp default systimestamp
);

create table tipo_reporte (
   id_tipo_reporte number generated by default as identity primary key,
   nombre_reporte  varchar2(120) not null,
   descripcion     varchar2(300),
   sql_base        clob,
   categoria       varchar2(60),
   estado          char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion  timestamp default systimestamp
);

create table reportes_generados (
   id_reporte_generado number generated by default as identity primary key,
   id_tipo_reporte     number not null,
   id_usuario          number not null,
   parametros_json     clob,
   ruta_archivo        varchar2(300),
   formato_salida      varchar2(30),
   estado              varchar2(30),
   fecha_creacion      timestamp default systimestamp,
   constraint fk_rg_tipo foreign key ( id_tipo_reporte )
      references tipo_reporte ( id_tipo_reporte ),
   constraint fk_rg_user foreign key ( id_usuario )
      references usuarios ( id_usuario )
);

create table categoria_producto (
   id_categoria     number generated by default as identity primary key,
   nombre_categoria varchar2(100) not null unique,
   codigo_categoria varchar2(6) not null unique,
   descripcion      varchar2(200),
   estado           char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion   timestamp default systimestamp
);

create table proveedores (
   id_proveedor     number generated by default as identity primary key,
   nombre_proveedor varchar2(120) not null,
   contacto         varchar2(120),
   telefono         varchar2(25),
   email            varchar2(120),
   direccion        varchar2(200),
   cedula_juridica  varchar2(40),
   estado           char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_registro   timestamp default systimestamp
);

create table almacenes (
   id_almacen     number generated by default as identity primary key,
   nombre_almacen varchar2(100) not null unique,
   responsable    varchar2(120),
   telefono       varchar2(25),
   direccion      varchar2(200),
   estado         char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion timestamp default systimestamp
);

create table clientes (
   id_cliente     number generated by default as identity primary key,
   nombre_cliente varchar2(120) not null,
   cedula         varchar2(40),
   telefono       varchar2(25),
   email          varchar2(120),
   direccion      varchar2(200),
   fecha_registro timestamp default systimestamp,
   estado         char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) )
);

create table descuentos (
   id_descuento     number generated by default as identity primary key,
   nombre_descuento varchar2(120) not null,
   tipo_descuento   varchar2(20) not null,
   valor_descuento  number(12,2) not null check ( valor_descuento >= 0 ),
   fecha_inicio     date,
   fecha_fin        date,
   id_producto      number,
   estado           char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion   timestamp default systimestamp
);

create table productos (
   id_producto         number generated by default as identity primary key,
   codigo_producto     varchar2(24) unique,           -- SKU
   nombre_producto     varchar2(150) not null,
   descripcion         varchar2(400),
   precio_venta        number(12,2) default 0 not null check ( precio_venta >= 0 ),
   precio_compra       number(12,2) default 0 not null check ( precio_compra >= 0 ),
   stock               number(12,2) default 0 not null check ( stock >= 0 ),
   unidad_medida       varchar2(20),
   id_categoria        number not null,
   id_proveedor        number,
   id_almacen          number,
   estado              char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion      timestamp default systimestamp,
   fecha_actualizacion timestamp,
   constraint fk_prod_cat foreign key ( id_categoria )
      references categoria_producto ( id_categoria ),
   constraint fk_prod_prov foreign key ( id_proveedor )
      references proveedores ( id_proveedor ),
   constraint fk_prod_alma foreign key ( id_almacen )
      references almacenes ( id_almacen )
);

-- Secuencia del SKU
create sequence seq_sku start with 1 increment by 1 nocache;

-- Función SKU (usa DBMS_CRYPTO/DBMS_RANDOM ya concedidos por SYS)
create or replace function fn_gen_sku (
   p_id_categoria number
) return varchar2 is
   v_cod categoria_producto.codigo_categoria%type;
   v_num number;
begin
   select codigo_categoria
     into v_cod
     from categoria_producto
    where id_categoria = p_id_categoria;

   v_num := seq_sku.nextval;
   return 'ZHN-'
          || v_cod
          || '-'
          || lpad(
      v_num,
      5,
      '0'
   );
end;
/
SHOW ERRORS;

-- Trigger: autogenera SKU si viene NULL
create or replace trigger trg_prod_sku_bi before
   insert on productos
   for each row
begin
   if :new.codigo_producto is null then
      :new.codigo_producto := fn_gen_sku(:new.id_categoria);
   end if;
end;
/
SHOW ERRORS;

-- FK tardía: descuentos → productos
alter table descuentos
   add constraint fk_desc_prod foreign key ( id_producto )
      references productos ( id_producto );

-- Cabecera de compras (base mínima para demo)
create table compras (
   id_compra       number generated by default as identity primary key,
   id_proveedor    number,
   id_usuario      number,    -- quién registró
   fecha_compra    timestamp default systimestamp,
   subtotal        number(12,2) default 0 not null,
   descuento_total number(12,2) default 0 not null,
   impuesto        number(12,2) default 0 not null,
   total           number(12,2) default 0 not null,
   observacion     varchar2(300),
   constraint fk_compra_prov foreign key ( id_proveedor )
      references proveedores ( id_proveedor ),
   constraint fk_compra_user foreign key ( id_usuario )
      references usuarios ( id_usuario )
);

-- Detalle de compras (sin referenciar virtual a virtual)
create table detalle_compras (
   id_detalle_compra  number generated by default as identity primary key,
   id_compra          number not null,
   id_producto        number not null,
   cantidad           number(12,2) not null check ( cantidad > 0 ),
   precio_unitario    number(12,2) not null check ( precio_unitario >= 0 ),
   descuento_unitario number(12,2) default 0 not null check ( descuento_unitario >= 0 ),
   subtotal           number(12,2) generated always as ( ( cantidad * precio_unitario ) - descuento_unitario ) virtual,
   impuesto           number(12,2) default 0 not null check ( impuesto >= 0 ),
   total_linea        number(12,2) generated always as ( ( cantidad * precio_unitario ) - descuento_unitario + impuesto ) virtual
   ,
   fecha_registro     timestamp default systimestamp,
   constraint fk_dc_compra foreign key ( id_compra )
      references compras ( id_compra ),
   constraint fk_dc_prod foreign key ( id_producto )
      references productos ( id_producto )
);

-- Movimientos de inventario
create table movimientos_inventario (
   id_movimiento    number generated by default as identity primary key,
   id_producto      number not null,
   tipo_movimiento  char(1) not null check ( tipo_movimiento in ( 'E',
                                                                 'S',
                                                                 'A' ) ),
   cantidad         number(12,2) not null check ( cantidad > 0 ),
   referencia       varchar2(60),
   motivo           varchar2(200),
   id_almacen       number,
   stock_anterior   number(12,2),
   stock_nuevo      number(12,2),
   fecha_movimiento timestamp default systimestamp,
   constraint fk_mov_prod foreign key ( id_producto )
      references productos ( id_producto ),
   constraint fk_mov_alma foreign key ( id_almacen )
      references almacenes ( id_almacen )
);

create table metodos_pago (
   id_metodo_pago number generated by default as identity primary key,
   nombre_metodo  varchar2(60) not null unique,
   descripcion    varchar2(200),
   estado         char(1) default 'A' check ( estado in ( 'A',
                                                  'I' ) ),
   fecha_creacion timestamp default systimestamp
);

create table ventas (
   id_venta        number generated by default as identity primary key,
   codigo_venta    varchar2(20) unique,
   id_usuario      number not null,
   id_cliente      number,
   id_metodo_pago  number,
   fecha_venta     timestamp default systimestamp,
   descuento_total number(12,2) default 0 not null,
   impuesto        number(12,2) default 0 not null,
   subtotal        number(12,2) default 0 not null,
   total           number(12,2) default 0 not null,
   observacion     varchar2(300),
   estado          varchar2(20) default 'REGISTRADA',
   fecha_creacion  timestamp default systimestamp,
   constraint fk_venta_user foreign key ( id_usuario )
      references usuarios ( id_usuario ),
   constraint fk_venta_cli foreign key ( id_cliente )
      references clientes ( id_cliente ),
   constraint fk_venta_pago foreign key ( id_metodo_pago )
      references metodos_pago ( id_metodo_pago )
);

create sequence seq_cod_venta start with 1 increment by 1 nocache;

create or replace trigger trg_venta_codigo_bi before
   insert on ventas
   for each row
begin
   if :new.codigo_venta is null then
      :new.codigo_venta := 'V'
                           || to_char(
         seq_cod_venta.nextval,
         'FM000000'
      );
   end if;
end;
/
SHOW ERRORS;

create table detalle_ventas (
   id_detalle_venta   number generated by default as identity primary key,
   id_venta           number not null,
   id_producto        number not null,
   cantidad           number(12,2) not null check ( cantidad > 0 ),
   precio_unitario    number(12,2) not null check ( precio_unitario >= 0 ),
   descuento_unitario number(12,2) default 0 not null check ( descuento_unitario >= 0 ),
   subtotal           number(12,2) generated always as ( ( cantidad * precio_unitario ) - descuento_unitario ) virtual,
   impuesto           number(12,2) default 0 not null check ( impuesto >= 0 ),
   total_linea        number(12,2) generated always as ( ( cantidad * precio_unitario ) - descuento_unitario + impuesto ) virtual
   ,
   fecha_registro     timestamp default systimestamp,
   constraint fk_dv_venta foreign key ( id_venta )
      references ventas ( id_venta ),
   constraint fk_dv_prod foreign key ( id_producto )
      references productos ( id_producto )
);

create index ix_prod_nombre on
   productos (
      nombre_producto
   );
create index ix_prod_categoria on
   productos (
      id_categoria
   );
create index ix_ventas_fecha on
   ventas (
      fecha_venta
   );
create index ix_mov_prod_fecha on
   movimientos_inventario (
      id_producto,
      fecha_movimiento
   );
create index ix_clientes_nombre on
   clientes (
      nombre_cliente
   );

insert into roles (
   nombre_rol,
   descripcion
) values ( 'admin',
           'Administrador' );
insert into roles (
   nombre_rol,
   descripcion
) values ( 'vendedor',
           'Vendedor POS' );

insert into metodos_pago ( nombre_metodo ) values ( 'Efectivo' );
insert into metodos_pago ( nombre_metodo ) values ( 'SINPE Móvil' );
insert into metodos_pago ( nombre_metodo ) values ( 'Tarjeta' );

commit;
-- ======================================================================
-- BLOQUE C — Funciones/Procedimientos de Autenticación (USUARIO TIENDA)
-- ======================================================================

-- Salt aleatoria
create or replace function fn_auth_make_salt return varchar2 is
   v_salt varchar2(32);
begin
   v_salt := dbms_random.string(
      'x',
      16
   );
   return v_salt;
end;
/
SHOW ERRORS;

-- Hash SHA-256(password||salt), hex en minúsculas
create or replace function fn_auth_hash (
   p_password varchar2,
   p_salt     varchar2
) return varchar2 is
   v_raw raw(2000);
begin
   v_raw := utl_raw.cast_to_raw(p_password || p_salt);
   return lower(rawtohex(dbms_crypto.hash(
      v_raw,
      dbms_crypto.hash_sh256
   )));
end;
/
SHOW ERRORS;

-- REGISTER
create or replace procedure sp_auth_register (
   p_nombre     in varchar2,
   p_usuario    in varchar2,
   p_email      in varchar2,
   p_contrasena in varchar2,
   p_telefono   in varchar2,
   p_id_empresa in number,
   p_id_rol     in number,
   p_id_usuario out number
) as
   v_cnt  number;
   v_salt varchar2(32);
   v_hash varchar2(64);
begin
   select count(*)
     into v_cnt
     from empresas
    where id_empresa = p_id_empresa;
   if v_cnt = 0 then
      raise_application_error(
         -20001,
         'Empresa no existe.'
      );
   end if;
   select count(*)
     into v_cnt
     from roles
    where id_rol = p_id_rol;
   if v_cnt = 0 then
      raise_application_error(
         -20002,
         'Rol no existe.'
      );
   end if;
   select count(*)
     into v_cnt
     from usuarios
    where lower(usuario) = lower(p_usuario);
   if v_cnt > 0 then
      raise_application_error(
         -20010,
         'El usuario ya existe.'
      );
   end if;
   select count(*)
     into v_cnt
     from usuarios
    where lower(email) = lower(p_email);
   if v_cnt > 0 then
      raise_application_error(
         -20011,
         'El email ya está registrado.'
      );
   end if;
   v_salt := fn_auth_make_salt();
   v_hash := fn_auth_hash(
      p_contrasena,
      v_salt
   );
   insert into usuarios (
      nombre,
      usuario,
      email,
      contrasena_hash,
      telefono
   ) values ( p_nombre,
              p_usuario,
              p_email,
              v_salt
              || ':'
              || v_hash,
              p_telefono ) returning id_usuario into p_id_usuario;

   insert into usuarios_empresas (
      id_usuario,
      id_empresa,
      id_rol
   ) values ( p_id_usuario,
              p_id_empresa,
              p_id_rol );

   insert into log_actividades (
      id_usuario,
      modulo,
      accion,
      objeto,
      descripcion,
      ip_origen
   ) values ( p_id_usuario,
              'SEGURIDAD',
              'REGISTER',
              'USUARIOS',
              'Registro de usuario',
              'LOCAL' );

   commit;
exception
   when others then
      rollback;
      raise;
end;
/
SHOW ERRORS;

-- LOGIN
create or replace procedure sp_auth_login (
   p_usuario_o_email in varchar2,
   p_contrasena      in varchar2,
   p_ip              in varchar2,
   p_dispositivo     in varchar2,
   p_id_sesion       out number,
   p_id_usuario      out number
) as
   v_hash_stored varchar2(200);
   v_salt        varchar2(100);
   v_hash_input  varchar2(64);
   v_estado      char(1);
   v_sep_pos     pls_integer;
begin
   select u.id_usuario,
          u.contrasena_hash,
          u.estado
     into
      p_id_usuario,
      v_hash_stored,
      v_estado
     from usuarios u
    where lower(u.usuario) = lower(p_usuario_o_email)
       or lower(u.email) = lower(p_usuario_o_email);

   if v_estado <> 'A' then
      raise_application_error(
         -20020,
         'Usuario inactivo o bloqueado.'
      );
   end if;
   v_sep_pos := instr(
      v_hash_stored,
      ':'
   );
   if v_sep_pos = 0 then
      raise_application_error(
         -20023,
         'Hash almacenado con formato inválido.'
      );
   end if;
   v_salt := substr(
      v_hash_stored,
      1,
      v_sep_pos - 1
   );
   v_hash_input := fn_auth_hash(
      p_contrasena,
      v_salt
   );
   if v_hash_stored <> v_salt
                       || ':'
                       || v_hash_input then
      raise_application_error(
         -20021,
         'Credenciales inválidas.'
      );
   end if;

   insert into log_sesiones (
      id_usuario,
      ip_origen,
      dispositivo,
      descripcion,
      estado
   ) values ( p_id_usuario,
              p_ip,
              p_dispositivo,
              'Inicio de sesión',
              'INICIADA' ) returning id_sesion into p_id_sesion;

   insert into log_actividades (
      id_usuario,
      modulo,
      accion,
      objeto,
      descripcion,
      ip_origen
   ) values ( p_id_usuario,
              'SEGURIDAD',
              'LOGIN',
              'USUARIOS',
              'Inicio de sesión',
              p_ip );

   commit;
exception
   when no_data_found then
      raise_application_error(
         -20022,
         'Usuario no encontrado.'
      );
   when others then
      rollback;
      raise;
end;
/
SHOW ERRORS;

-- LOGOUT
create or replace procedure sp_auth_logout (
   p_id_sesion in number
) as
   v_user number;
begin
   update log_sesiones
      set fecha_cierre = systimestamp,
          estado = 'CERRADA'
    where id_sesion = p_id_sesion returning id_usuario into v_user;

   if sql%rowcount = 0 then
      raise_application_error(
         -20030,
         'Sesión no encontrada.'
      );
   end if;
   insert into log_actividades (
      id_usuario,
      modulo,
      accion,
      objeto,
      descripcion,
      ip_origen
   ) values ( v_user,
              'SEGURIDAD',
              'LOGOUT',
              'USUARIOS',
              'Cierre de sesión',
              'LOCAL' );

   commit;
exception
   when others then
      rollback;
      raise;
end;
/
SHOW ERRORS;

-- ======================================================================
-- BLOQUE D — Pruebas rápidas (USUARIO TIENDA)
-- ======================================================================

-- Verificar objetos válidos
select object_name,
       object_type,
       status
  from user_objects
 where object_type in ( 'TABLE',
                        'SEQUENCE',
                        'TRIGGER',
                        'FUNCTION',
                        'PROCEDURE' )
 order by object_type,
          object_name;

-- Semilla de rol/empresa (idempotente)
merge into roles r
using (
   select 'admin' n
     from dual
) s on ( lower(r.nombre_rol) = s.n )
when not matched then
insert (
   nombre_rol,
   descripcion )
values
   ( 'admin',
     'Administrador' );

merge into empresas e
using (
   select 'Mi Empresa' n
     from dual
) s on ( lower(e.nombre) = lower(s.n) )
when not matched then
insert ( nombre )
values
   ( 'Mi Empresa' );

commit;

-- Registro de usuario
   SET SERVEROUTPUT ON
declare
   v_empresa number;
   v_rol     number;
   v_user    number;
begin
   select id_empresa
     into v_empresa
     from empresas
    where nombre = 'Mi Empresa';
   select id_rol
     into v_rol
     from roles
    where nombre_rol = 'admin';

   sp_auth_register(
      p_nombre     => 'Yasser',
      p_usuario    => 'yasser',
      p_email      => 'yasser@demo.com',
      p_contrasena => 'Secreta123',
      p_telefono   => '8888-8888',
      p_id_empresa => v_empresa,
      p_id_rol     => v_rol,
      p_id_usuario => v_user
   );
   dbms_output.put_line('Nuevo usuario ID = ' || v_user);
end;
/
-- Login
VAR v_sesion NUMBER
VAR v_uid    NUMBER
EXEC sp_auth_login('yasser','Secreta123','127.0.0.1','VSCode', :v_sesion, :v_uid);
PRINT v_sesion
PRINT v_uid

-- Logout
EXEC sp_auth_logout(:v_sesion);
-- =====================================================================